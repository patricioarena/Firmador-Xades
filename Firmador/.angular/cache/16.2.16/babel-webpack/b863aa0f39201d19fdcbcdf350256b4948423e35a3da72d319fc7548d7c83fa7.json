{"ast":null,"code":"import { ToastrService } from 'ngx-toastr';\nimport { take } from 'rxjs/internal/operators/take';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { ModalComponent } from '../modal/modal.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-toastr\";\nimport * as i2 from \"ngx-bootstrap/modal\";\nexport let NotificationService = /*#__PURE__*/(() => {\n  class NotificationService {\n    constructor(toastr, modalService) {\n      this.toastr = toastr;\n      this.modalService = modalService;\n      this.toastr.toastrConfig.preventDuplicates = true;\n      this.options = this.toastr.toastrConfig;\n      this.options.positionClass = 'toast-bottom-right';\n      this.options.timeOut = 1500;\n    }\n    showVerify(title, message, arr) {\n      this.toastr.success(title, message, this.options).onTap.pipe(take(1)).subscribe(() => this.openModal('Firmas en el documento', arr));\n    }\n    showNoVerify(title, message, arr) {\n      this.toastr.error(title, message, this.options).onTap.pipe(take(1)).subscribe(() => this.openModal('Firmas en el documento', arr));\n    }\n    showError(title, message) {\n      this.toastr.error(title, message, this.options).onTap.pipe(take(1)).subscribe(() => this.toasterClickedHandler());\n    }\n    showInfo(title, message) {\n      this.toastr.info(title, message, this.options).onTap.pipe(take(1)).subscribe(() => this.toasterClickedHandler());\n    }\n    toasterClickedHandler() {\n      // console.log('Toastr clicked');\n    }\n    openModal(title, arr) {\n      const auxArrCN = this.makeArray(arr);\n      this.modalRef = this.modalService.show(ModalComponent, {\n        class: 'modal-lg',\n        initialState: {\n          title: title,\n          data: arr,\n          arrCN: auxArrCN\n        }\n      });\n    }\n    subjectTOArray(arr, index) {\n      let aux = arr[index].Subject;\n      aux = aux.replace(/=/g, '\":\"');\n      aux = JSON.stringify(aux);\n      aux = aux.replace(/\\\\/g, '');\n      aux = aux.replace(/\\, /g, '\",\"');\n      aux = JSON.parse('{' + aux + '}');\n      return aux;\n    }\n    makeArray(arr) {\n      const aux = [];\n      arr.forEach(element => {\n        const temp = this.subjectTOArray(arr, arr.indexOf(element));\n        aux.push(temp.CN);\n      });\n      return aux;\n    }\n    static {\n      this.ɵfac = function NotificationService_Factory(t) {\n        return new (t || NotificationService)(i0.ɵɵinject(i1.ToastrService), i0.ɵɵinject(i2.BsModalService));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: NotificationService,\n        factory: NotificationService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return NotificationService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}