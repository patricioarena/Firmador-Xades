{"ast":null,"code":"import { HttpClient, HttpHeaders } from \"@angular/common/http\";\nimport { map } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport var TiposDeFirma = /*#__PURE__*/function (TiposDeFirma) {\n  TiposDeFirma[TiposDeFirma[\"Xades_BES_Con_ds_Object\"] = 1] = \"Xades_BES_Con_ds_Object\";\n  TiposDeFirma[TiposDeFirma[\"Xades_BES_Sin_ds_Object\"] = 2] = \"Xades_BES_Sin_ds_Object\";\n  return TiposDeFirma;\n}(TiposDeFirma || {});\nexport class XmlModel {\n  constructor(objeto) {\n    this.XmlFile = objeto && objeto.Archivo || \"\";\n    this.Extension = objeto && objeto.Extension || \".xml\";\n  }\n}\n// tslint:disable-next-line: max-classes-per-file\nexport let DigitalSignatureService = /*#__PURE__*/(() => {\n  class DigitalSignatureService {\n    get apiurl() {\n      return this._apiurl;\n    }\n    // tslint:disable-next-line: no-shadowed-variable\n    constructor(HttpClient) {\n      this.HttpClient = HttpClient;\n      this._apiurl = \"https://localhost:8400/\";\n    }\n    verificar(objeto) {\n      const url = `${this.apiurl}api/Signature/Verify/Exist/One/Or/More/Signatures`;\n      return this.HttpClient.post(url, objeto, {\n        headers: new HttpHeaders().set(\"Content-Type\", \"application/json\").append(\"Access-Control-Allow-Origin\", \"*\")\n      }).pipe(map(res => res));\n    }\n    firmaDigital(objeto, tipoFirma, ocsp) {\n      const url = `${this.apiurl}api/Signature/Single/Typesignature/${tipoFirma}/oscp/${ocsp}`;\n      return this.HttpClient.post(url, objeto, {\n        headers: new HttpHeaders().set(\"Content-Type\", \"application/json\").append(\"Access-Control-Allow-Origin\", \"*\"),\n        responseType: \"text\"\n      }).pipe(map(res => res));\n    }\n    firmaElectronica(objeto, tipoFirma, ocsp) {\n      const url = `${this.apiurl}api/Signature/Single/Typesignature/${tipoFirma}/oscp/${ocsp}`;\n      return this.HttpClient.post(url, objeto, {\n        headers: new HttpHeaders().set(\"Content-Type\", \"application/json\").append(\"Access-Control-Allow-Origin\", \"*\"),\n        responseType: \"text\"\n      }).pipe(map(res => res));\n    }\n    ping() {\n      const url = `${this.apiurl}api/Signature/ping`;\n      return this.HttpClient.get(url, {\n        headers: new HttpHeaders().set(\"Content-Type\", \"application/json\").append(\"Access-Control-Allow-Origin\", \"*\"),\n        responseType: \"blob\",\n        observe: \"response\"\n      }).pipe(map(res => res));\n    }\n    pdfSignature() {\n      const url = `${this.apiurl}api/Signature/PDF/Signature`;\n      return this.HttpClient.get(url, {\n        headers: new HttpHeaders().set(\"Content-Type\", \"application/json\").append(\"Access-Control-Allow-Origin\", \"*\"),\n        responseType: \"blob\"\n        // tslint:disable-next-line: object-literal-sort-keys\n        ,\n\n        observe: \"response\"\n      }).pipe(map(res => res));\n    }\n    pdfSign64(model) {\n      const url = `${this.apiurl}api/Signature/PDF/Signature/Sign/Base64`;\n      // Hacer la petición POST\n      return this.HttpClient.post(url, model, {\n        headers: new HttpHeaders().set(\"Content-Type\", \"application/json\").append(\"Access-Control-Allow-Origin\", \"*\")\n      }).pipe(map(res => res));\n    }\n    static {\n      this.ɵfac = function DigitalSignatureService_Factory(t) {\n        return new (t || DigitalSignatureService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: DigitalSignatureService,\n        factory: DigitalSignatureService.ɵfac,\n        providedIn: \"root\"\n      });\n    }\n  }\n  return DigitalSignatureService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}